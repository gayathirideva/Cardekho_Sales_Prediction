# -*- coding: utf-8 -*-
"""cardekho_ML_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L4cewoeA43NsYrGFVJvqLD20st_BxvF_
"""

import numpy as np
import pandas as pd
df = pd.read_csv('/content/ml_file.csv')
df

df.isnull().sum()



#x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
#x_train.shape,x_test.shape,y_train.shape,y_test.shape

#x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.model_selection import train_test_split
# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from math import sqrt

# Load your dataset
from sklearn.model_selection import RandomizedSearchCV

# Assume your target variable is named 'target'
X = df.drop('priceActual', axis=1)
y = df['priceActual']
# Assuming 'y' is your target variable and 'df_one_hot' is your feature set
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression

# Define a dictionary of regression models
r_models = {
    'RandomForest': RandomForestRegressor(),
    'LinearRegression': LinearRegression(),
    # Add more models as needed
}
predictions = {}

for model_name, model_instance in r_models.items():
    #predictions[model_name] = model_instance.predict(x_test)
    model_instance.fit(x_train, y_train)

predictions = {}
for model_name, model_instance in r_models.items():
    predictions[model_name] = model_instance.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score
from scipy.stats import skew, randint

# Perform hyperparameter tuning using GridSearchCV
param_dist = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30, 40, 50],
    'min_samples_split':  [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': ['auto', 'sqrt', 'log2']
}

# Create a random forest regressor
rf_regressor = RandomForestRegressor()

# Use RandomizedSearchCV
random_search = RandomizedSearchCV(estimator=rf_regressor, param_distributions=param_dist, n_iter=10, cv=5, n_jobs= -1)
random_search.fit(x_train, y_train)
best_params = random_search.best_params_
best_rf_regressor = RandomForestRegressor(**best_params)
best_rf_regressor.fit(x_train, y_train)
train_predictions = best_rf_regressor.predict(x_train)

for model_name, y_pred in predictions.items():
    mse = mean_squared_error(y_test, y_pred)
    rmse_train = sqrt(mse)
    mae_train = mean_absolute_error(y_train, train_predictions)
    r2 = r2_score(y_test, y_pred)
    print(f"{model_name} - Mean Squared Error: {mse},rmse_train:{rmse_train},mae_train: {mae_train}, R-squared: {r2}")

import pickle
from joblib import dump

# Save the trained models using Pickle
for model_name, model_instance in r_models.items():
    with open(f'{model_name}_model.pkl', 'wb') as file:
        pickle.dump(model_instance, file)



# Save the trained models using Joblib
for model_name, model_instance in r_models.items():
    dump(model_instance, f'{model_name}_model.joblib')

